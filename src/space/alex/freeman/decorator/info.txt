---------------
- Определение -
---------------

Декоратор - структурный паттерн, который динамически наделяет объект новыми возможностями и является гибкой альтернативой
субклассированию в области расширения функциональности.

---------------------------
- Принципы проектирования -
---------------------------

1) OCP The open-closed principle.  Принцип открытости/закрытости.
Классы должны быть открыты для расширения, но закрыты для изменения.
Системы должны проектироваться так, чтобы их закрытые компоненты были изолированы от новых расширений.

-----------------------------
- Дополнительная информация -
-----------------------------

- Не изменяет интерфейс, но добавляем новые обязанности

- Соответствие интерфейсов. Интерфейс декоратора должен соответствовать интерфейсу декорируемого компонента. Поэтому
классы ConcreteDecorator должны наследовать общему классу.

- Большая гибкость, нежели у статического наследования. Паттерн декоратор позволяет более гибко добавлять объекту
новые обязанности, чем было бы возможно в случае статического (множественного) наследования. Декоратор может добавлять
и удалять обязанности во время выполнения программы. При использовании же наследования требуется создавать новый
класс для каждой дополнительной обязанности (например, BorderedScrollableTextView, BorderedTextView), что ведет к
увеличению числа классов и, как следствие, к возрастанию сложности системы. Кроме того, применение нескольких
декораторов к одному компоненту позволяет произвольным образом сочетать обязанности. Декораторы позволяют легко
добавить одно и то же свойство дважды. Например, чтобы окружить объект Text View двойной рамкой, нужно просто
добавить два декоратора BorderDecorators. Двойное наследование классу Border в лучшем случае чревато ошибками;

- Поскольку паттерн декоратор изменяет лишь внешний облик компонента, последнему ничего не надо "знать" о своих
декораторах, то есть декораторы прозрачны для компонента. В случае стратегий самому компоненту известно о возможных
расширениях. Поэтому он должен располагать информацией обо всех стратегиях и ссылаться на них.