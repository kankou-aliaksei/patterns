---------------
- Определение -
---------------

Стратегия - поведенческий паттерн, кототорый определяет семейство алгоритмов, инкапсулирует и обеспечивает их взаимозаменяемость.
Паттерн позволяет модифицировать алгоритмы независимо от их использования на стороне клиента.

---------------------------
- Принципы проектирования -
---------------------------

1) Инкапсулируйте то, что изменяется. Выделите аспекты приложения, которые могут изменяться, и отделите их от тех, которые всегда остаются постоянными.

Выделите то, что изменяется, и "инкапсулируйте" эти аспекты, чтобы они не влияли на работу остального кода.

Результат: меньше непредвиденных последствий от изменения кода (независимая изменяемость, слабая связанность),
бОльшая гибкость ваших систем (расширяемость).

Проблема: Когда настанет время изменения (change) или расширения (extensions), вам придется снова открыть код и
разобраться в том, что нужно добавить или удалить. Часто подобный код размещается в разных частях приложения, что
основательно затрудняет его сопровождение (maintenance) и обновление (updates) и является причиной непредвиденных
ошибок (error-prone).

2) Программируйте на уровне интерфейса, а не на уровне реализации.

В этом случае клиентским классам не нужно знать подробности реализации используемых классов.

3) Отдавайте предпочтение композиции перед наследованием.

Позволяет изменять поведение во время выполнения.

-----------------------------
- Дополнительная информация -
-----------------------------

- клиенты должны "знать" о различных стратегиях. Потенциальный недостаток этого паттерна в том, что для выбора
подходящей стратегии клиент должен понимать, чем отличаются разные стратегии. Поэтому наверняка придется раскрыть
клиенту некоторые особенности реализации. Отсюда следует, что паттерн стратегия стоит применять лишь тогда, когда
различия в поведении имеют значение для клиента;
- обмен информацией между стратегией и контекстом. Интерфейс класса Strategy разделяется всеми подклассами
ConcreteStrategy — неважно, сложна или тривиальна их реализация. Поэтому вполне вероятно, что некоторые стратегии
не будут пользоваться всей передаваемой им информацией, особенно простые. Это означает, что в отдельных случаях
контекст создаст и проинициализирует параметры, которые никому не нужны. Если возникнет проблема, то между классами
Strategy и Context придется установить более тесную связь;
- увеличение числа объектов. Применение стратегий увеличивает число объектов в приложении. Иногда эти издержки можно
сократить, если реализовать стратегии в виде объектов без состояния, которые могут разделяться несколькими контекстами.
Остаточное состояние хранится в самом контексте и передается при каждом обращении к объекту-стратегии. Разделяемые
стратегии не должны сохранять состояние между вызовами. В описании паттерна приспособленец этот подхбд обсуждается
более подробно.